{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getColorMode","window","localStorage","getItem","setItem","App","React","useState","isDarkMode","setIsDarkMode","speed","setSpeed","battery","Date","time","setTime","useEffect","console","log","timeInterval","setInterval","speedInterval","fetch","then","data","json","catch","err","clearInterval","themeClass","document","body","style","backgroundColor","transition","className","toLocaleTimeString","onChange","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uNAIA,SAASA,IAEP,MAAe,UAD0C,SAA7CC,OAAOC,aAAaC,QAAQ,aAA0B,OAAS,WAI3EF,OAAOC,aAAaE,QAAQ,YAAa,UAClC,GA+FMC,MA5Ff,WAEE,MAAoCC,IAAMC,SAASP,GAAnD,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,EAA0BH,IAAMC,SAAS,IAAzC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BL,IAAMC,SAAS,IAA7C,mBAAOK,EAAP,KACA,GADA,KACwBN,IAAMC,SAAS,IAAIM,OAA3C,mBAAOC,EAAP,KAAaC,EAAb,KAUAT,IAAMU,WAAU,WACdC,QAAQC,IAAI,qBAAsBV,EAAa,OAAQ,SACvDP,OAAOC,aAAaE,QAAQ,YAAaI,EAAa,OAAQ,WAC7D,CAACA,IAEJF,IAAMU,WAAU,WACd,IAAIG,EAAeC,aAAY,WAC7BL,EAAQ,IAAIF,QACX,KAUCQ,EAAgBD,aAAY,WAC9BE,MAAM,cAAcC,MAAK,SAAAC,GACvBA,EAAKC,OAAOF,MAAM,SAAAC,GAChBb,EAASa,EAAKd,aAEfgB,OAAM,SAAAC,SAGR,KAEH,OAAO,WACLC,cAAcT,GACdS,cAAcP,OAKlB,IAAIQ,EAAarB,EAAa,QAAU,SAIxC,OAHAsB,SAASC,KAAKC,MAAMC,gBAAkBzB,EAAa,UAAY,QAC/DsB,SAASC,KAAKC,MAAME,WAAa,sBAG/B,sBAAKC,UAAW,YAAcN,EAA9B,UACE,iCACE,sBAAKM,UAAU,iBAAf,UACI,oBAAIA,UAAU,OAAd,8BACA,oBAAIA,UAAU,OAAd,SAAsBrB,EAAKsB,uBAC7B,cAAC,IAAD,CACEC,SAAU5B,EACVD,WAAYA,EACZ8B,KAAM,UAKZ,yBAASH,UAAU,OAAnB,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uCACA,kCAAI,sBAAMA,UAAU,aAAhB,SAA8BzB,IAAlC,eAEF,sBAAKyB,UAAU,iBAAf,UACE,yCACA,kCAAI,sBAAMA,UAAU,aAAhB,SAA8BvB,IAAlC,WAEF,sBAAKuB,UAAU,iBAAf,UACE,0CACA,kCAAI,sBAAMA,UAAU,aAAhB,kBAAJ,YAEF,sBAAKA,UAAU,iBAAf,UACE,6CACA,kCAAI,sBAAMA,UAAU,aAAhB,gBAAJ,yBCrFGI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.10849271.chunk.js","sourcesContent":["import './App.css';\nimport { DarkModeToggle } from \"react-dark-mode-toggle-2\";\nimport React from 'react';\n\nfunction getColorMode(){\n  let color = window.localStorage.getItem('colorMode') === 'dark' ? 'dark' : 'light'\n  if ( color === 'dark'){\n    return true\n  }\n  window.localStorage.setItem('colorMode', 'light')\n  return false\n}\n\nfunction App() {\n  \n  const [isDarkMode, setIsDarkMode] = React.useState(getColorMode);\n  const [speed, setSpeed] = React.useState(30);\n  const [battery, setBattery] = React.useState(90);\n  const [time, setTime] = React.useState(new Date());\n\n  // console.log(\"Rendered\");\n  \n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  React.useEffect(() => {\n    console.log(\"Color mode changed\", isDarkMode ? \"dark\": \"light\");\n    window.localStorage.setItem(\"colorMode\", isDarkMode ? \"dark\": \"light\")\n  }, [isDarkMode])\n  \n  React.useEffect(() => {\n    let timeInterval = setInterval(() => {\n      setTime(new Date())\n    }, 1000)\n    // console.log(\"Re-rendered\")\n\n    // let speedInterval = setInterval(() => {\n    //   setSpeed(current => {\n    //         if (current < 10) return current = 30\n    //         return current + getRandomInt(-2, 2)\n    //       }\n    //     )\n    // }, 1000)\n    let speedInterval = setInterval(() => {\n      fetch('/api/speed').then(data => {\n        data.json().then( data => {\n          setSpeed(data.speed)\n        })\n      }).catch(err => {\n        // console.log(err)\n      })\n    }, 1000);\n\n    return () => {\n      clearInterval(timeInterval)\n      clearInterval(speedInterval)\n      // console.log(\"Cleared\");\n    }\n  })\n  \n  let themeClass = isDarkMode ? \" dark\" : \" light\"\n  document.body.style.backgroundColor = isDarkMode ? \"#282c34\" : \"white\";\n  document.body.style.transition = \"background-color 1s\";\n\n  return (\n    <div className={\"container\" + themeClass}>\n      <header>\n        <div className=\"header-content\">\n            <h3 className=\"date\">27 Nov, 2021 Sat</h3>\n            <h3 className=\"date\">{time.toLocaleTimeString()}</h3>\n          <DarkModeToggle\n            onChange={setIsDarkMode}\n            isDarkMode={isDarkMode}\n            size={80}\n          />\n        </div>\n      </header>\n\n      <section className=\"main\">\n        <div className=\"main-container\">\n          <div className=\"data-container\">\n            <h3>Speed</h3>\n            <p> <span className=\"data-value\">{speed}</span> km/hr</p>\n          </div>\n          <div className=\"data-container\">\n            <h3>Battery</h3>\n            <p> <span className=\"data-value\">{battery}</span> %</p>\n          </div>\n          <div className=\"data-container\">\n            <h3>Distance</h3>\n            <p> <span className=\"data-value\">1942</span> km</p>\n          </div>\n          <div className=\"data-container\">\n            <h3>Temperature</h3>\n            <p> <span className=\"data-value\">65</span> &#8451;</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}